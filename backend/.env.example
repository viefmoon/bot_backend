# Base de datos local (funciona con docker-compose)
DATABASE_URL=postgresql://postgres:postgres@localhost:5433/bot_db

# ===== CONFIGURACIÓN REQUERIDA =====
# Debes actualizar TODOS estos valores antes de ejecutar el bot

# 1. Google AI - REQUERIDO
# Obtén tu API Key gratis en: https://makersuite.google.com/app/apikey
GOOGLE_AI_API_KEY=tu_api_key_aqui
GEMINI_MODEL=gemini-2.5-pro
EMBEDDING_MODEL=text-embedding-004
# Configuración de pensamiento de Gemini (opcional)
# -1 = Pensamiento dinámico (el modelo decide cuánto pensar)
# 0 = Desactivar pensamiento
# 128-32768 = Presupuesto fijo de tokens para pensar
# Si no se especifica, usa -1 (pensamiento dinámico)
GEMINI_THINKING_BUDGET=-1

# Configuración del Agente AI (opcional)
# true = Usa el agente unificado (maneja consultas y órdenes en un solo paso)
# false = Usa el sistema de dos agentes (general + orden)
# Si no se especifica, usa false (sistema de dos agentes)
USE_UNIFIED_AGENT=true

# 2. WhatsApp Business API - REQUERIDO
# Obtén estos valores en: https://developers.facebook.com
# Tutorial: Ver QUICK_START.md sección "Obtener Credenciales de WhatsApp"
WHATSAPP_PHONE_NUMBER_MESSAGING_ID=tu_phone_number_id
WHATSAPP_ACCESS_TOKEN=tu_access_token
WHATSAPP_VERIFY_TOKEN=tu_verify_token

# URLs locales
FRONTEND_BASE_URL=http://localhost:3000
NODE_ENV=development
PORT=5000

# Límites de mensajes
RATE_LIMIT_MAX_MESSAGES=30
RATE_LIMIT_TIME_WINDOW_MINUTES=5

# Configuración regional
DEFAULT_TIMEZONE=America/Mexico_City
DEFAULT_LOCALE=es-MX

# Stripe (Pagos) - OPCIONAL (dejar vacío si no se usa)
STRIPE_SECRET_KEY=
STRIPE_WEBHOOK_SECRET=

# =============================================
# VARIABLES MÍNIMAS REQUERIDAS:
# =============================================
# 1. DATABASE_URL - Conexión a PostgreSQL
# 2. GOOGLE_AI_API_KEY - Para Gemini AI
# 3. GEMINI_MODEL - Modelo de Gemini a usar
# 4. WHATSAPP_PHONE_NUMBER_MESSAGING_ID - ID del teléfono en Meta
# 5. WHATSAPP_ACCESS_TOKEN - Token de acceso de WhatsApp
# 6. WHATSAPP_VERIFY_TOKEN - Token de verificación del webhook
# 7. FRONTEND_BASE_URL - URL del frontend para enlaces
# 8. NODE_ENV - Entorno (development/production)
# 9. PORT - Puerto del servidor
# 10. RATE_LIMIT_MAX_MESSAGES - Límite de mensajes
# 11. RATE_LIMIT_TIME_WINDOW_MINUTES - Ventana de tiempo para el límite
# 12. DEFAULT_TIMEZONE - Zona horaria por defecto
# 13. DEFAULT_LOCALE - Configuración regional por defecto
# Redis Configuration (Optional)
# Redis se usa para compartir OTPs y caché entre múltiples instancias
# Si no se configura, se usará memoria local (no escalable)
REDIS_HOST=localhost
REDIS_PORT=6380
# REDIS_PASSWORD=tu_password_de_redis

# API Key para servicios en la nube
# Clave secreta para autenticar peticiones de servicios en la nube (sincronización, audio, etc.)
# Genera una clave segura y manténla privada
CLOUD_API_KEY=genera_una_clave_secreta_aqui

# BullMQ Worker Configuration
# Número de trabajos concurrentes que cada worker puede procesar
# Para desarrollo: 2-5 es suficiente
# Para producción: 10-20 dependiendo de recursos del servidor
BULLMQ_WORKER_CONCURRENCY=2

# Número de procesos worker a iniciar (solo para PM2 en producción)
# Para desarrollo: 1 es suficiente
# Para producción: 2-4 dependiendo de núcleos CPU disponibles
NUM_WORKERS=1
