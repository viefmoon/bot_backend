// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum OrderType {
  DINE_IN
  TAKE_AWAY
  DELIVERY
}

enum OrderStatus {
  PENDING
  IN_PROGRESS
  IN_PREPARATION
  READY
  IN_DELIVERY
  DELIVERED
  COMPLETED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
}

enum PizzaHalf {
  LEFT
  RIGHT
  FULL
}

enum IngredientAction {
  ADD
  REMOVE
}

enum PreparationStatus {
  PENDING
  IN_PROGRESS
  READY
  DELIVERED
  CANCELLED
}

// Models
model Category {
  id           String        @id
  name         String        @unique
  description  String?
  isActive     Boolean       @default(true)
  photoId      String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  deletedAt    DateTime?
  subcategories Subcategory[]
}

model Customer {
  id                  String               @id @default(uuid()) @db.Uuid // UUID primary key
  whatsappPhoneNumber String               @unique // WhatsApp phone number
  firstName           String?              @db.VarChar(100)
  lastName            String?              @db.VarChar(100)
  email               String?              @db.VarChar(255)
  birthDate           DateTime?            @db.Date
  fullChatHistory     Json?
  relevantChatHistory Json?
  stripeCustomerId    String?              @unique
  lastInteraction     DateTime?
  totalOrders         Int                  @default(0)
  totalSpent          Decimal              @default(0) @db.Decimal(10, 2)
  isActive            Boolean              @default(true)
  isBanned            Boolean              @default(false)
  bannedAt            DateTime?
  banReason           String?              @db.Text
  deletedAt           DateTime?            // Soft delete
  lastSyncAt          DateTime?            // Last sync timestamp
  syncVersion         Int                  @default(0) // For optimistic locking
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  addresses           Address[]            // One-to-Many relationship
  orders              Order[]              // One-to-Many relationship
  
  @@index([whatsappPhoneNumber])
  @@index([email])
  @@index([lastSyncAt])
}

// Customer addresses (1:N relationship)
// A customer can have multiple delivery addresses
model Address {
  id                String   @id @default(uuid()) @db.Uuid // UUID primary key
  customerId        String   @db.Uuid // Foreign key to Customer
  street            String   @db.VarChar(200)
  number            String   @db.VarChar(50)
  interiorNumber    String?  @db.VarChar(50)
  neighborhood      String?  @db.VarChar(150)
  city              String?  @db.VarChar(100)
  state             String?  @db.VarChar(100)
  zipCode           String?  @db.VarChar(10)
  country           String?  @db.VarChar(100)
  references        String?  @db.Text
  latitude          Decimal? @db.Decimal(10, 8)
  longitude         Decimal? @db.Decimal(11, 8)
  isDefault         Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  deletedAt         DateTime? // Soft delete
  customer          Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  
  @@index([customerId])
  @@index([zipCode])
}

model MessageLog {
  id        Int     @id @default(autoincrement())
  messageId String  @unique
  processed Boolean @default(false)
}

model MessageRateLimit {
  id              Int      @id @default(autoincrement())
  whatsappPhoneNumber String   @unique
  messageCount    Int      @default(0)
  lastMessageTime DateTime
}

model ProductModifier {
  id               String             @id
  groupId          String
  name             String
  description      String?
  price            Float?
  sortOrder        Int                @default(0)
  isDefault        Boolean            @default(false)
  isActive         Boolean            @default(true)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  deletedAt        DateTime?
  modifierGroup    ModifierGroup      @relation(fields: [groupId], references: [id])
  orderItems       OrderItem[]        @relation("OrderItemProductModifiers")
}

model ModifierGroup {
  id                      String            @id
  name                    String
  description             String?
  minSelections           Int               @default(0)
  maxSelections           Int               @default(1)
  isRequired              Boolean           @default(false)
  allowMultipleSelections Boolean           @default(false)
  isActive                Boolean           @default(true)
  productId               String
  createdAt               DateTime          @default(now())
  updatedAt               DateTime          @updatedAt
  deletedAt               DateTime?
  product                 Product           @relation(fields: [productId], references: [id])
  productModifiers        ProductModifier[]
}

model Order {
  id                   String            @id @default(uuid())
  dailyNumber          Int
  orderType            OrderType
  orderStatus          OrderStatus       @default(PENDING)
  paymentStatus        PaymentStatus?
  totalCost            Float
  customerId           String            @db.Uuid
  estimatedTime        Int               @default(0)
  scheduledAt          DateTime?
  messageId            String?
  stripeSessionId      String?
  syncedWithLocal      Boolean           @default(false)
  isFromWhatsApp       Boolean           @default(true)
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt
  orderItems           OrderItem[]
  deliveryInfo         OrderDeliveryInfo?
  customer             Customer          @relation(fields: [customerId], references: [id])
}

// Order's delivery address (snapshot at order time)
// This is a copy of the customer's address at the time of order creation
// Preserves historical data even if customer changes their address later
model OrderDeliveryInfo {
  id                Int       @id @default(autoincrement())
  street            String?   @db.VarChar(200)
  number            String?   @db.VarChar(50)
  interiorNumber    String?   @db.VarChar(50)
  neighborhood      String?   @db.VarChar(150)
  city              String?   @db.VarChar(100)
  state             String?   @db.VarChar(100)
  zipCode           String?   @db.VarChar(10)  // Changed from postalCode
  country           String?   @db.VarChar(100)
  references        String?   @db.Text // Changed from additionalDetails
  latitude          Decimal?  @db.Decimal(10, 8) // Changed to Decimal for precision
  longitude         Decimal?  @db.Decimal(11, 8) // Changed to Decimal for precision
  pickupName        String?   // For pickup orders
  preOrderId        Int?
  orderId           String?   @unique
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  order             Order?    @relation(fields: [orderId], references: [id])
  preOrder          PreOrder? @relation(fields: [preOrderId], references: [id])
}

model OrderItem {
  id                    String                     @id @default(uuid())
  orderId               String
  productId             String
  productVariantId      String?
  basePrice             Float
  finalPrice            Float
  preparationStatus     PreparationStatus          @default(PENDING)
  statusChangedAt       DateTime                   @default(now())
  preparationNotes      String?
  createdAt             DateTime                   @default(now())
  updatedAt             DateTime                   @updatedAt
  deletedAt             DateTime?
  order                 Order                      @relation(fields: [orderId], references: [id])
  product               Product                    @relation(fields: [productId], references: [id])
  productVariant        ProductVariant?            @relation(fields: [productVariantId], references: [id])
  productModifiers      ProductModifier[]          @relation("OrderItemProductModifiers")
  selectedPizzaIngredients SelectedPizzaIngredient[]
}

model PizzaIngredient {
  id                    String                    @id
  name                  String
  ingredientValue       Int                       @default(1)
  ingredients           String?
  isActive              Boolean                   @default(true)
  sortOrder             Int                       @default(0)
  productIds            String[]                  // Array de IDs de productos relacionados
  createdAt             DateTime                  @default(now())
  updatedAt             DateTime                  @updatedAt
  deletedAt             DateTime?
  products              Product[]                 @relation("ProductPizzaIngredients")
  selectedPizzaIngredients SelectedPizzaIngredient[]
}

model PreOrder {
  id                    Int                @id @default(autoincrement())
  orderItems            Json
  orderType             OrderType
  scheduledAt          DateTime?
  whatsappPhoneNumber   String             // Store WhatsApp phone number instead of customerId
  messageId             String?
  createdAt             DateTime           @default(now())
  updatedAt             DateTime           @updatedAt
  deliveryInfo          OrderDeliveryInfo[]
  
  @@index([whatsappPhoneNumber])
}

model Product {
  id                   String              @id
  name                 String
  description          String?
  price                Float?
  hasVariants          Boolean             @default(false)
  isActive             Boolean             @default(true)
  isPizza              Boolean             @default(false)
  subcategoryId        String
  preparationScreenId  String?
  photoId              String?
  estimatedPrepTime    Int                 @default(0)
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
  deletedAt            DateTime?
  subcategory          Subcategory         @relation(fields: [subcategoryId], references: [id])
  variants             ProductVariant[]
  modifierGroups       ModifierGroup[]
  pizzaIngredients     PizzaIngredient[]   @relation("ProductPizzaIngredients")
  orderItems           OrderItem[]
}

model ProductVariant {
  id          String      @id
  productId   String
  name        String
  price       Float
  isActive    Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  deletedAt   DateTime?
  product     Product     @relation(fields: [productId], references: [id])
  orderItems  OrderItem[]
}

model RestaurantConfig {
  id                    Int                @id @default(autoincrement())
  // Información básica del restaurante
  restaurantName        String             @default("La Leña") // Nombre del restaurante
  phoneMain             String?            // Teléfono principal
  phoneSecondary        String?            // Teléfono secundario/móvil
  address               String?            // Dirección completa
  city                  String?            // Ciudad
  state                 String?            // Estado
  postalCode            String?            // Código postal
  country               String?            // País
  
  // Configuración de operación
  acceptingOrders       Boolean            @default(true)
  estimatedPickupTime   Int                @default(20) // Tiempo estimado de recolección en minutos
  estimatedDeliveryTime Int                @default(40) // Tiempo estimado de entrega a domicilio en minutos
  openingGracePeriod    Int                @default(30) // Minutos después de abrir antes de aceptar pedidos
  closingGracePeriod    Int                @default(30) // Minutos antes de cerrar para dejar de aceptar pedidos
  timeZone              String             @default("America/Mexico_City") // Zona horaria del restaurante
  businessHours         BusinessHours[]
  
  // Configuración de delivery
  deliveryCoverageArea  Json?              // Polígono de cobertura - Array de objetos {lat: number, lng: number}
}

model BusinessHours {
  id                 Int              @id @default(autoincrement())
  dayOfWeek          Int              // 0 = Domingo, 1 = Lunes, ... 6 = Sábado
  openingTime        String?          // Hora de apertura en formato HH:mm (null = cerrado)
  closingTime        String?          // Hora de cierre en formato HH:mm (null = cerrado)
  isClosed           Boolean          @default(false) // true si el restaurante está cerrado ese día
  restaurantConfigId Int
  restaurantConfig   RestaurantConfig @relation(fields: [restaurantConfigId], references: [id])
  
  @@unique([restaurantConfigId, dayOfWeek]) // Un solo horario por día
}

model SeederControl {
  id      String   @id
  lastRun DateTime
}

model SelectedPizzaIngredient {
  id               Int              @id @default(autoincrement())
  half             PizzaHalf        @default(FULL)
  pizzaIngredientId String
  orderItemId      String
  action           IngredientAction @default(ADD)
  orderItem        OrderItem        @relation(fields: [orderItemId], references: [id])
  pizzaIngredient  PizzaIngredient  @relation(fields: [pizzaIngredientId], references: [id])
}

model Subcategory {
  id          String    @id
  categoryId  String
  name        String    @unique
  description String?
  isActive    Boolean   @default(true)
  photoId     String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  category    Category  @relation(fields: [categoryId], references: [id])
  products    Product[]
}

// Sync tracking between local and cloud backends
model SyncLog {
  id            Int       @id @default(autoincrement())
  entityType    String    // 'customer', 'order', etc.
  entityId      String    // Entity UUID
  action        String    // 'create', 'update', 'delete'
  syncDirection String    // 'local_to_cloud' or 'cloud_to_local'
  syncStatus    String    // 'pending', 'success', 'failed'
  errorMessage  String?   @db.Text
  createdAt     DateTime  @default(now())
  completedAt   DateTime?
  
  @@index([entityType, entityId])
  @@index([syncStatus])
}