// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [vector]
}

// Enums
enum OrderType {
  DINE_IN
  TAKE_AWAY
  DELIVERY
}

enum OrderStatus {
  PENDING
  IN_PROGRESS
  IN_PREPARATION
  READY
  IN_DELIVERY
  DELIVERED
  COMPLETED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
  CANCELLED
}

enum PaymentMethod {
  CASH
  CREDIT_CARD
  DEBIT_CARD
  TRANSFER
  STRIPE
  PAYPAL
  OTHER
}

enum PizzaHalf {
  FULL
  HALF_1
  HALF_2
}

enum CustomizationAction {
  ADD
  REMOVE
}

enum CustomizationType {
  FLAVOR
  INGREDIENT
}

enum PreparationStatus {
  PENDING
  IN_PROGRESS
  READY
  DELIVERED
  CANCELLED
}

// Models
model Category {
  id           String        @id
  name         String        @unique
  description  String?
  isActive     Boolean       @default(true)
  photoId      String?
  sortOrder    Int           @default(0)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  deletedAt    DateTime?
  subcategories Subcategory[]
}

model Customer {
  id                  String               @id @default(uuid()) @db.Uuid // UUID primary key
  whatsappPhoneNumber String               @unique // WhatsApp phone number
  firstName           String?              @db.VarChar(100)
  lastName            String?              @db.VarChar(100)
  email               String?              @db.VarChar(255)
  birthDate           DateTime?            @db.Date
  fullChatHistory     Json?
  relevantChatHistory Json?
  stripeCustomerId    String?              @unique
  lastInteraction     DateTime?
  totalOrders         Int                  @default(0)
  totalSpent          Decimal              @default(0) @db.Decimal(10, 2)
  isActive            Boolean              @default(true)
  isBanned            Boolean              @default(false)
  bannedAt            DateTime?
  banReason           String?              @db.Text
  deletedAt           DateTime?            // Soft delete
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  addresses           Address[]            // One-to-Many relationship
  orders              Order[]              // One-to-Many relationship
  
  @@index([whatsappPhoneNumber])
  @@index([email])
}

// Customer addresses (1:N relationship)
// A customer can have multiple delivery addresses
model Address {
  id                String   @id @default(uuid()) @db.Uuid // UUID primary key
  customerId        String   @db.Uuid // Foreign key to Customer
  name              String   @db.VarChar(100) // e.g., "Casa", "Oficina", "Casa de mamá"
  street            String   @db.VarChar(200)
  number            String   @db.VarChar(50)
  interiorNumber    String?  @db.VarChar(50)
  neighborhood      String?  @db.VarChar(150)
  city              String?  @db.VarChar(100)
  state             String?  @db.VarChar(100)
  zipCode           String?  @db.VarChar(10)
  country           String?  @db.VarChar(100)
  deliveryInstructions String?  @db.Text
  latitude          Decimal? @db.Decimal(10, 8)
  longitude         Decimal? @db.Decimal(11, 8)
  isDefault         Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  deletedAt         DateTime? // Soft delete
  customer          Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  
  @@index([customerId])
  @@index([zipCode])
}

model MessageLog {
  id        Int     @id @default(autoincrement())
  messageId String  @unique
  processed Boolean @default(false)
}

model ProductModifier {
  id               String             @id
  modifierGroupId  String
  name             String
  description      String?
  price            Float?
  sortOrder        Int                @default(0)
  isDefault        Boolean            @default(false)
  isActive         Boolean            @default(true)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  deletedAt        DateTime?
  modifierGroup    ModifierGroup      @relation(fields: [modifierGroupId], references: [id])
  orderItems       OrderItem[]        @relation("OrderItemProductModifiers")
}

model ModifierGroup {
  id                      String            @id
  name                    String
  description             String?
  minSelections           Int               @default(0)
  maxSelections           Int               @default(1)
  isRequired              Boolean           @default(false)
  allowMultipleSelections Boolean           @default(false)
  isActive                Boolean           @default(true)
  sortOrder               Int               @default(0)
  createdAt               DateTime          @default(now())
  updatedAt               DateTime          @updatedAt
  deletedAt               DateTime?
  products                Product[]         @relation("ProductModifierGroups")
  productModifiers        ProductModifier[]
}

model Order {
  id                   String            @id @default(uuid()) @db.Uuid
  shiftOrderNumber     Int?
  orderType            OrderType
  orderStatus          OrderStatus       @default(PENDING)
  subtotal             Float             @default(0)
  total                Float             @default(0)
  customerId           String            @db.Uuid
  estimatedDeliveryTime DateTime?
  scheduledAt          DateTime?
  notes                String?
  isFromWhatsApp       Boolean           @default(true)
  finalizedAt          DateTime?         // When order was marked as completed/delivered
  // Additional relations for local backend compatibility
  shiftId              String?           @db.Uuid
  userId               String?           @db.Uuid
  tableId              String?           @db.Uuid
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt
  deletedAt            DateTime?
  // Relations
  orderItems           OrderItem[]
  deliveryInfo         DeliveryInfo?
  customer             Customer          @relation(fields: [customerId], references: [id])
  payments             Payment[]
  ticketImpressions    TicketImpression[]
  adjustments          Adjustment[]
  shift                Shift?            @relation(fields: [shiftId], references: [id])
  table                Table?            @relation(fields: [tableId], references: [id])
  user                 User?             @relation(fields: [userId], references: [id])
  
  @@index([shiftId])
  @@index([tableId])
  @@index([userId])
}

// Order's delivery address (snapshot at order time)
// This is a copy of the customer's address at the time of order creation
// Preserves historical data even if customer changes their address later
model DeliveryInfo {
  id                    String    @id @default(uuid()) @db.Uuid
  orderId               String?   @unique @db.Uuid
  preOrderId            Int?      @unique
  name                  String?   @db.VarChar(100) // Address name like "Casa", "Oficina"
  fullAddress           String?   @db.Text // Full address for phone orders
  street                String?   @db.VarChar(200)
  number                String?   @db.VarChar(50)
  interiorNumber        String?   @db.VarChar(50)
  neighborhood          String?   @db.VarChar(150)
  city                  String?   @db.VarChar(100)
  state                 String?   @db.VarChar(100)
  zipCode               String?   @db.VarChar(10)
  country               String?   @db.VarChar(100)
  recipientName         String?   @db.VarChar(255) // Recipient name
  recipientPhone        String?   @db.VarChar(50) // Recipient phone
  deliveryInstructions  String?   @db.Text // Delivery instructions
  latitude              Decimal?  @db.Decimal(10, 8)
  longitude             Decimal?  @db.Decimal(11, 8)
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  order                 Order?    @relation(fields: [orderId], references: [id])
  preOrder              PreOrder? @relation(fields: [preOrderId], references: [id])
}

model OrderItem {
  id                    String                     @id @default(uuid()) @db.Uuid
  orderId               String?                    @db.Uuid
  preOrderId            Int?
  productId             String
  productVariantId      String?
  basePrice             Float
  finalPrice            Float
  preparationStatus     PreparationStatus          @default(PENDING)
  statusChangedAt       DateTime                   @default(now())
  preparationNotes      String?
  createdAt             DateTime                   @default(now())
  updatedAt             DateTime                   @updatedAt
  deletedAt             DateTime?
  order                 Order?                     @relation(fields: [orderId], references: [id])
  preOrder              PreOrder?                  @relation(fields: [preOrderId], references: [id])
  product               Product                    @relation(fields: [productId], references: [id])
  productVariant        ProductVariant?            @relation(fields: [productVariantId], references: [id])
  productModifiers      ProductModifier[]          @relation("OrderItemProductModifiers")
  selectedPizzaCustomizations SelectedPizzaCustomization[]
  adjustments           Adjustment[]
  
  @@index([orderId])
  @@index([preOrderId])
}

// Nueva estructura para personalización de pizzas
model PizzaCustomization {
  id                    String                       @id
  name                  String                       // Nombre: "Hawaiana", "Pepperoni", "Champiñones"
  type                  CustomizationType            // FLAVOR | INGREDIENT
  ingredients           String?                      // Para FLAVOR: lista de ingredientes
  toppingValue          Int                          @default(1) // Cuánto cuenta para el límite
  isActive              Boolean                      @default(true)
  sortOrder             Int                          @default(0)
  createdAt             DateTime                     @default(now())
  updatedAt             DateTime                     @updatedAt
  deletedAt             DateTime?
  products              Product[]                    @relation("ProductPizzaCustomizations")
  selectedPizzaCustomizations SelectedPizzaCustomization[]
}

// Configuración específica para pizzas
model PizzaConfiguration {
  id                    String   @id @default(uuid()) @db.Uuid
  productId             String   @unique
  product               Product  @relation(fields: [productId], references: [id])
  includedToppings      Int      @default(4)      // Valor de toppings incluidos en precio base
  extraToppingCost      Float    @default(20)     // Costo por topping adicional
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  deletedAt             DateTime?
}

model PreOrder {
  id                    Int                @id @default(autoincrement())
  orderType             OrderType
  estimatedDeliveryTime Int                @default(0)
  scheduledAt           DateTime?
  notes                 String?
  subtotal              Float              @default(0)
  total                 Float              @default(0)
  whatsappPhoneNumber   String             // Store WhatsApp phone number instead of customerId
  createdAt             DateTime           @default(now())
  updatedAt             DateTime           @updatedAt
  orderItems            OrderItem[]
  deliveryInfo          DeliveryInfo?
  adjustments           Adjustment[]
  
  @@index([whatsappPhoneNumber])
}

model Product {
  id                   String              @id
  name                 String
  description          String?
  price                Float?
  hasVariants          Boolean             @default(false)
  isActive             Boolean             @default(true)
  isPizza              Boolean             @default(false)
  subcategoryId        String
  preparationScreenId  String?
  photoId              String?
  estimatedPrepTime    Int                 @default(0)
  sortOrder            Int                 @default(0)
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
  deletedAt            DateTime?
  // Embedding para búsqueda semántica (modelo text-embedding-004 usa 768 dimensiones)
  embedding            Unsupported("vector(768)")?
  subcategory          Subcategory         @relation(fields: [subcategoryId], references: [id])
  variants             ProductVariant[]
  modifierGroups       ModifierGroup[]     @relation("ProductModifierGroups")
  pizzaConfiguration   PizzaConfiguration?
  pizzaCustomizations  PizzaCustomization[] @relation("ProductPizzaCustomizations")
  orderItems           OrderItem[]
}

model ProductVariant {
  id          String      @id
  productId   String
  name        String
  price       Float
  isActive    Boolean     @default(true)
  sortOrder   Int         @default(0)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  deletedAt   DateTime?
  product     Product     @relation(fields: [productId], references: [id])
  orderItems  OrderItem[]
}

model RestaurantConfig {
  id                    Int                @id @default(autoincrement())
  // Información básica del restaurante
  restaurantName        String             @default("La Leña") // Nombre del restaurante
  phoneMain             String?            // Teléfono principal
  phoneSecondary        String?            // Teléfono secundario/móvil
  address               String?            // Dirección completa
  city                  String?            // Ciudad
  state                 String?            // Estado
  postalCode            String?            // Código postal
  country               String?            // País
  
  // Configuración de operación
  acceptingOrders       Boolean            @default(true)
  estimatedPickupTime   Int                @default(20) // Tiempo estimado de recolección en minutos
  estimatedDeliveryTime Int                @default(40) // Tiempo estimado de entrega a domicilio en minutos
  openingGracePeriod    Int                @default(30) // Minutos después de abrir antes de aceptar pedidos
  closingGracePeriod    Int                @default(30) // Minutos antes de cerrar para dejar de aceptar pedidos
  scheduledOrdersLeadTime Int              @default(60) // Tiempo mínimo de anticipación para pedidos programados en minutos
  timeZone              String             @default("America/Mexico_City") // Zona horaria del restaurante
  businessHours         BusinessHours[]
  
  // Configuración de delivery
  deliveryCoverageArea  Json?              // Polígono de cobertura - Array de objetos {lat: number, lng: number}
  minimumOrderValueForDelivery Decimal?   @db.Decimal(10, 2) // Pedido mínimo para entrega a domicilio. Null o 0 para desactivar
}

model BusinessHours {
  id                 Int              @id @default(autoincrement())
  dayOfWeek          Int              // 0 = Domingo, 1 = Lunes, ... 6 = Sábado
  openingTime        String?          // Hora de apertura en formato HH:mm (null = cerrado)
  closingTime        String?          // Hora de cierre en formato HH:mm (null = cerrado)
  isClosed           Boolean          @default(false) // true si el restaurante está cerrado ese día
  restaurantConfigId Int
  restaurantConfig   RestaurantConfig @relation(fields: [restaurantConfigId], references: [id])
  
  @@unique([restaurantConfigId, dayOfWeek]) // Un solo horario por día
}


model SelectedPizzaCustomization {
  id                    String               @id @default(uuid()) @db.Uuid
  orderItemId           String               @db.Uuid
  pizzaCustomizationId  String
  half                  PizzaHalf            @default(FULL)
  action                CustomizationAction  @default(ADD)
  orderItem             OrderItem            @relation(fields: [orderItemId], references: [id])
  pizzaCustomization    PizzaCustomization   @relation(fields: [pizzaCustomizationId], references: [id])
  
  @@unique([orderItemId, pizzaCustomizationId, half, action])
}

model Subcategory {
  id          String    @id
  categoryId  String
  name        String    @unique
  description String?
  isActive    Boolean   @default(true)
  photoId     String?
  sortOrder   Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  category    Category  @relation(fields: [categoryId], references: [id])
  products    Product[]
}

// Sync tracking between local and cloud backends
model SyncLog {
  id              String    @id @default(uuid())
  syncType        String    // MENU_PULL | ORDERS_PUSH | CUSTOMERS_SYNC
  recordsAffected Int       @default(0)
  status          String    // SUCCESS | FAILED
  error           String?   @db.Text
  startedAt       DateTime  @default(now())
  completedAt     DateTime?
  
  @@index([syncType])
  @@index([status])
}

// Payment tracking for orders
model Payment {
  id            String         @id @default(uuid()) @db.Uuid
  orderId       String         @db.Uuid
  paymentMethod PaymentMethod  @default(CASH)
  amount        Decimal        @db.Decimal(10, 2)
  status        PaymentStatus  @default(PENDING)
  stripePaymentId String?      // Stripe payment intent ID
  metadata      Json?          // Additional payment metadata
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  deletedAt     DateTime?
  order         Order          @relation(fields: [orderId], references: [id])
  
  @@index([orderId])
  @@index([status])
}

// Placeholder models for local backend compatibility
// These models are defined but may not be actively used in the WhatsApp bot context

model Shift {
  id            String         @id @default(uuid()) @db.Uuid
  shiftDate     DateTime       @db.Date
  shiftNumber   Int            @default(1)    // Multiple shifts per day (1, 2, 3...)
  startTime     DateTime       @default(now())
  endTime       DateTime?
  orderCounter  Int            @default(0)    // Count of orders in this shift
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  orders        Order[]
  
  @@unique([shiftDate, shiftNumber])
  @@index([shiftDate])
  @@index([startTime])
}

model Table {
  id            String         @id @default(uuid()) @db.Uuid
  tableNumber   String         @unique
  capacity      Int            @default(4)
  isActive      Boolean        @default(true)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  orders        Order[]
}

model User {
  id            String         @id @default(uuid()) @db.Uuid
  username      String         @unique
  email         String?        @unique
  firstName     String?
  lastName      String?
  isActive      Boolean        @default(true)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  deletedAt     DateTime?
  orders        Order[]
}

model TicketImpression {
  id            String         @id @default(uuid()) @db.Uuid
  orderId       String         @db.Uuid
  printedAt     DateTime       @default(now())
  printerName   String?
  order         Order          @relation(fields: [orderId], references: [id])
  
  @@index([orderId])
}

model Adjustment {
  id            String         @id @default(uuid()) @db.Uuid
  orderId       String?        @db.Uuid
  preOrderId    Int?
  orderItemId   String?        @db.Uuid
  type          String         // e.g., "discount", "surcharge", "tip"
  amount        Decimal        @db.Decimal(10, 2)
  reason        String?
  appliedBy     String?        // User who applied the adjustment
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  deletedAt     DateTime?
  order         Order?         @relation(fields: [orderId], references: [id])
  preOrder      PreOrder?      @relation(fields: [preOrderId], references: [id])
  orderItem     OrderItem?     @relation(fields: [orderItemId], references: [id])
  
  @@index([orderId])
  @@index([preOrderId])
  @@index([orderItemId])
}


// Sync metadata for all entities
model SyncMetadata {
  id              String    @id @default(uuid())
  entityType      String    // Customer | Order | Address | Product | etc
  entityId        String    // UUID of the entity
  lastModifiedAt  DateTime  @updatedAt
  modifiedBy      String    @default("REMOTE") // LOCAL | REMOTE
  syncPending     Boolean   @default(false)
  syncVersion     Int       @default(1)
  metadata        Json?     // Additional sync data if needed
  createdAt       DateTime  @default(now())
  
  @@unique([entityType, entityId])
  @@index([syncPending, entityType])
  @@index([lastModifiedAt])
  @@index([entityId])
}